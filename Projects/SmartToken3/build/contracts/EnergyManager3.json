{
  "contractName": "EnergyManager3",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "GetMessage",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526040805190810160405280601f81526020017f49206b6e6f7720736d61727420636f6e74726163742074657374696e672121008152506000908051906020019061004f929190610062565b5034801561005c57600080fd5b50610107565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b5090565b90565b6101a4806101166000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303e33b5314610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b50505050509050905600a165627a7a7230582001f4fde56e6420358054ed7cc01f8b664f22104293ad191daf60853949d3fc830029",
  "deployedBytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303e33b5314610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b50505050509050905600a165627a7a7230582001f4fde56e6420358054ed7cc01f8b664f22104293ad191daf60853949d3fc830029",
  "sourceMap": "28:205:0:-;;;59:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;118:40;8:9:-1;5:2;;;30:1;27;20:12;5:2;118:40:0;28:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "28:205:0:-;;;;;;;;;;;;;;;;;;;;;;;;164:66;;8:9:-1;5:2;;;30:1;27;20:12;5:2;164:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;164:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;195:6;217:7;210:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;164:66;:::o",
  "source": "pragma solidity ^0.4.18;\r\n\r\ncontract EnergyManager3 {\r\n    string message = \"I know smart contract testing!!\";\r\n  \r\n  constructor() {\r\n    // constructor\r\n  }\r\n\r\n  function GetMessage() returns (string) {\r\n    return message;\r\n  }\r\n}\r\n/*\r\n  /// The seller's address\r\n  address public owner;\r\n\r\n  /// The buyer's address part on this contract\r\n  address public buyerAddr;\r\n\r\n  /// The Buyer struct  \r\n  struct Buyer {\r\n    address addr;\r\n    string name;\r\n\r\n    bool init;\r\n  }\r\n\r\n  /// The Order struct\r\n  struct Order {\r\n    string goods;\r\n    uint quantity;\r\n    uint number;\r\n    uint price;\r\n    uint safepay;\r\n    bool init;\r\n  }\r\n\r\n  /// The mapping to store orders\r\n  mapping (uint => Order) orders;\r\n\r\n\r\n  /// The sequence number of orders\r\n  uint orderseq;\r\n\r\n\r\n  /// Event triggered for every registered buyer\r\n  event BuyerRegistered(address buyer, string name);\r\n\r\n  /// Event triggered for every new order\r\n  event OrderSent(address buyer, string goods, uint quantity, uint orderno);\r\n\r\n  /// Event triggerd when the order gets valued and wants to know the value of the payment\r\n  event PriceSent(address buyer, uint orderno, uint price);\r\n\r\n  /// Event trigger when the buyer performs the safepay\r\n  event SafepaySent(address buyer, uint orderno, uint value, uint now);\r\n\r\n  /// The smart contract's constructor\r\n  constructor (address _buyerAddr) public payable {\r\n    \r\n    /// The seller is the contract's owner\r\n    owner = msg.sender;\r\n\r\n    buyerAddr = _buyerAddr;\r\n  }\r\n\r\n  /// The function to send purchase orders\r\n  ///   requires fee\r\n  ///   Payable functions returns just the transaction object, with no custom field.\r\n  ///   To get field values listen to OrderSent event.\r\n  function sendOrder(string goods, uint quantity) payable public {\r\n    \r\n    /// Accept orders just from buyer\r\n    require(msg.sender == buyerAddr);\r\n\r\n    /// Increment the order sequence\r\n    orderseq++;\r\n\r\n    /// Create the order register\r\n    orders[orderseq] = Order(goods, quantity, orderseq, 0, 0,  true);\r\n\r\n    /// Trigger the event\r\n    emit OrderSent(msg.sender, goods, quantity, orderseq);\r\n\r\n  }\r\n\r\n  /// The function to query orders by number\r\n  ///   Constant functions returns custom fields\r\n  function queryOrder(uint number) constant public returns (address buyer, string goods, uint quantity, uint price, uint safepay) {\r\n    \r\n    /// Validate the order number\r\n    require(orders[number].init);\r\n\r\n    /// Return the order data\r\n    return(buyerAddr, orders[number].goods, orders[number].quantity, orders[number].price, orders[number].safepay);\r\n  }\r\n\r\n  /// The function to send the price to pay for order\r\n  ///  Just the owner can call this function\r\n  ///  requires free\r\n  function sendPrice(uint orderno, uint price) payable public {\r\n  \r\n    /// Only the owner can use this function\r\n    require(msg.sender == owner);\r\n\r\n    /// Validate the order number\r\n    require(orders[orderno].init);\r\n      /// Update the order price\r\n      orders[orderno].price = price;\r\n\r\n\r\n    /// Trigger the event\r\n    emit PriceSent(buyerAddr, orderno, price);\r\n\r\n  }\r\n\r\n  /// The function to send the value of order's price\r\n  ///  This value will be blocked until the delivery of order\r\n  ///  requires fee\r\n  function sendSafepay(uint orderno) payable public {\r\n\r\n    /// Validate the order number\r\n    require(orders[orderno].init);\r\n\r\n    /// Just the buyer can make safepay\r\n    require(buyerAddr == msg.sender);\r\n\r\n    /// The order's value plus the shipment value must equal to msg.value\r\n    require(orders[orderno].price == msg.value);\r\n\r\n    orders[orderno].safepay = msg.value;\r\n\r\n    emit SafepaySent(msg.sender, orderno, msg.value, now);\r\n  }\r\n\r\n \r\n  function health() pure public returns (string) {\r\n    return \"running\";\r\n  }\r\n}*/",
  "sourcePath": "c:\\Chainskills\\Projects\\SmartToken3\\contracts\\EnergyManager3.sol",
  "ast": {
    "absolutePath": "/c/Chainskills/Projects/SmartToken3/contracts/EnergyManager3.sol",
    "exportedSymbols": {
      "EnergyManager3": [
        17
      ]
    },
    "id": 18,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 17,
        "linearizedBaseContracts": [
          17
        ],
        "name": "EnergyManager3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "message",
            "nodeType": "VariableDeclaration",
            "scope": 17,
            "src": "59:50:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 2,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "59:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "49206b6e6f7720736d61727420636f6e74726163742074657374696e672121",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "76:33:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_688085808a68b58d0f0b8d642877dcb62a211e2a9880846063c7ae640929a837",
                "typeString": "literal_string \"I know smart contract testing!!\""
              },
              "value": "I know smart contract testing!!"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 7,
              "nodeType": "Block",
              "src": "132:26:0",
              "statements": []
            },
            "documentation": null,
            "id": 8,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "129:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "132:0:0"
            },
            "scope": 17,
            "src": "118:40:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15,
              "nodeType": "Block",
              "src": "203:27:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13,
                    "name": "message",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4,
                    "src": "217:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 12,
                  "id": 14,
                  "nodeType": "Return",
                  "src": "210:14:0"
                }
              ]
            },
            "documentation": null,
            "id": 16,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "GetMessage",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "183:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 16,
                  "src": "195:6:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "195:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "194:8:0"
            },
            "scope": 17,
            "src": "164:66:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 18,
        "src": "28:205:0"
      }
    ],
    "src": "0:3759:0"
  },
  "legacyAST": {
    "absolutePath": "/c/Chainskills/Projects/SmartToken3/contracts/EnergyManager3.sol",
    "exportedSymbols": {
      "EnergyManager3": [
        17
      ]
    },
    "id": 18,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 17,
        "linearizedBaseContracts": [
          17
        ],
        "name": "EnergyManager3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "message",
            "nodeType": "VariableDeclaration",
            "scope": 17,
            "src": "59:50:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 2,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "59:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "49206b6e6f7720736d61727420636f6e74726163742074657374696e672121",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "76:33:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_688085808a68b58d0f0b8d642877dcb62a211e2a9880846063c7ae640929a837",
                "typeString": "literal_string \"I know smart contract testing!!\""
              },
              "value": "I know smart contract testing!!"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 7,
              "nodeType": "Block",
              "src": "132:26:0",
              "statements": []
            },
            "documentation": null,
            "id": 8,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "129:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "132:0:0"
            },
            "scope": 17,
            "src": "118:40:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15,
              "nodeType": "Block",
              "src": "203:27:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13,
                    "name": "message",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4,
                    "src": "217:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 12,
                  "id": 14,
                  "nodeType": "Return",
                  "src": "210:14:0"
                }
              ]
            },
            "documentation": null,
            "id": 16,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "GetMessage",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "183:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 16,
                  "src": "195:6:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "195:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "194:8:0"
            },
            "scope": 17,
            "src": "164:66:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 18,
        "src": "28:205:0"
      }
    ],
    "src": "0:3759:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "39600518": {
      "events": {},
      "links": {},
      "address": "0x0db4c1bf680a81ed01d0c9d96a9941b66367c61f",
      "transactionHash": "0x37281313a24b9c46423e14616d1410366a1afe33b38f990e1ce0a4a09dcaf0f8"
    }
  },
  "schemaVersion": "2.0.0",
  "updatedAt": "2018-05-28T13:43:23.660Z"
}